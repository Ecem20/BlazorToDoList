@page "/todo"
@rendermode InteractiveServer

<style>
    ul {
        list-style-type: none;
        padding: 0;
    }

    li {
        margin-bottom: 10px;
    }

    .completed {
        text-decoration: line-through;
     }

    .todo-input {
        margin-right: 10px;
    }

    /* Dropdown Menu */
    .custom-dropdown {
        padding: 5px 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: orangered;
        color: white;
        font-weight: bold;
    }

    /* Title */
    .todo-header {
        color: darkblue;
        font-weight: bold; 
    }
</style>


<h3 class="todo-header">Todo (@todos.Count(t => !t.IsDone))</h3> @* count the unfinished ToDos *@

<hr />

<select @onchange="FilterTodos" class="custom-dropdown">
    <option value="all">All</option>
    <option value="completed">Completed</option>
    <option value="uncompleted">Uncompleted</option>
</select>

<h3></h3>

@* render the list of ToDos.*@
<ul>
    @foreach (var todo in todos)
    {
        <li>
            <input type=checkbox @bind="todo.IsDone" />
            <input @bind="todo.Title" />
            <button @onclick="() => Delete(todo)">Delete</button>
        </li>  @* render individual list items   *@
    }
</ul>

@* add some todos *@
<input @bind="newToDo" /> @* input'ta ne varsa bu dize değişkenine bağlı olmalıdır *@
<button @onclick="Add">Add</button>

@code {
    List<ToDoItem> todos = new List<ToDoItem>(); //Track the List of ToDo

    List<ToDoItem> filteredTodos = new List<ToDoItem>();
    
    string newToDo = ""; //add a string field

    public class ToDoItem
    {
        public string Title { get; set; }
        public bool IsDone { get; set; }
    }


    private void Add(MouseEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(newToDo))
        {
            todos.Add(new ToDoItem { Title = newToDo });
            newToDo = ""; //clear out the new todo field to be empty again. Two way data binding, so we can update the field, it should update the input as well.
        }
    }
    void Delete(ToDoItem todo)
    {
        todos.Remove(todo);
    }

    private void FilterTodos(ChangeEventArgs e)
    {
        string selectedValue = e.Value.ToString();

        if (selectedValue == "completed")
        {
            filteredTodos = todos.Where(t => t.IsDone).ToList();
        }
        else if (selectedValue == "uncompleted")
        {
            filteredTodos = todos.Where(t => !t.IsDone).ToList();
        }
        else
        {
            filteredTodos = todos;
        }
    }
}